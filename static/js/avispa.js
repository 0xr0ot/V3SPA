// Generated by CoffeeScript 1.6.3
(function() {
  var zoom;

  zoom = {
    step: 0.125,
    min: 0.125,
    max: 2.5
  };

  window.Risk = Backbone.View.extend({
    className: 'AvispaView',
    events: {
      'mousedown.avispa      SVG': 'OnMouseDown',
      'mousemove.avispa      SVG': 'OnMouseMove',
      'mouseup.avispa        SVG': 'OnMouseUp',
      'mousewheel.avispa     SVG': 'OnMouseWheel',
      'DOMMouseScroll.avispa SVG': 'OnMouseWheel',
      'contextmenu.avispa    SVG': 'OnContextMenu'
    },
    secondstage: function() {},
    initialize: function() {
      _.bindAll(this, 'render', 'OnMouseDown', 'OnMouseMove', 'OnMouseUp', 'OnMouseWheel', 'OnContextMenu');
      window.riskview = this;
      this.scale = 1.0;
      this.links = {};
      this.offset = null;
      this.dragItem = null;
      this.arrow = null;
      this.$el.html($('#template_risk').text());
      this.$canvas = this.$('svg.avispa');
      this.canvasdom = this.$canvas.get(0);
      this.$parent = this.$canvas.parent();
      this.$pan = this.$canvas.find('g.pan');
      this.$zoom = this.$canvas.find('g.zoom');
      this.$links = this.$canvas.find('g.links');
      this.$nodes = this.$canvas.find('g.nodes');
      this.$labels = this.$canvas.find('g.labels');
      this.$pan.x = window.innerWidth / 2;
      this.$pan.y = window.innerHeight / 2;
      this.Pan(0, 0);
      this.$('#zoomslider').slider({
        value: 1.0,
        min: zoom.min,
        max: zoom.max,
        step: zoom.step,
        slide: function(event, ui) {
          return riskview.Scale(ui.value);
        }
      }).on('mousedown', function(event) {
        if (event.which !== 1) {
          riskview.Scale(1.0);
          $(this).slider('value', 1.0);
        }
        event.stopPropagation();
      }).on('mousewheel', function(event) {
        var d, z;
        d = normalizeWheel(event);
        z = Math.max(0.25, Math.min(3.0, $(this).slider('value') + d * 0.25));
        riskview.Scale(z);
        $(this).slider('value', z);
        return cancelEvent(event);
      });
      this.secondstage();
      return this;
    },
    Pan: function(dx, dy) {
      this.$pan.x += dx;
      this.$pan.y += dy;
      this.$pan.attr('transform', "translate(" + this.$pan.x + ", " + this.$pan.y + ")");
      this.$parent.css('background-position', "" + this.$pan.x + "px " + this.$pan.y + "px");
      return this;
    },
    Scale: function(scale) {
      this.scale = scale;
      this.$zoom.attr('transform', "scale(" + scale + ")");
      return this;
    },
    Zoom: function(delta) {
      var scale;
      if (delta === 0) {
        scale = 1.0;
      } else {
        scale = this.scale + delta * zoom.step;
      }
      if (scale <= zoom.min || scale >= zoom.max) {
        return this;
      }
      this.Scale(scale);
      return this;
    },
    Point: function(event) {
      var point;
      point = this.canvasdom.createSVGPoint();
      point.x = event.clientX;
      point.y = event.clientY;
      point = point.matrixTransform(this.canvasdom.getScreenCTM().inverse());
      point.x = parseInt((point.x - this.$pan.x) / this.scale);
      point.y = parseInt((point.y - this.$pan.y) / this.scale);
      return [point.x, point.y];
    },
    OnMouseDown: function(event) {
      if (this.arrow != null) {
        this.arrow.Remove();
        this.arrow = null;
        return cancelEvent(event);
      }
      switch (event.which) {
        case 1:
          this.LeftDown(event);
          break;
        case 2:
          this.MiddleDown(event);
          break;
        case 3:
          if (this.RightDown) {
            this.RightDown(event);
          }
      }
      return cancelEvent(event);
    },
    LeftDown: function(event) {
      this.offset = [event.clientX, event.clientY];
    },
    MiddleDown: function(event) {
      this.Pan(-this.$pan.x + window.innerWidth / 2, -this.$pan.y + window.innerHeight / 2);
      this.Zoom(0);
      this.$('#zoomslider').slider('option', 'value', 1);
    },
    OnMouseMove: function(event) {
      if (this.offset) {
        this.Pan(event.clientX - this.offset[0], event.clientY - this.offset[1]);
        this.offset = [event.clientX, event.clientY];
      } else if (this.arrow) {
        this.arrow.Drag(event);
      } else if (this.dragItem) {
        this.dragItem.jitter++;
        if (this.dragItem.Drag) {
          this.dragItem.Drag(event);
        }
      }
      return cancelEvent(event);
    },
    OnMouseUp: function(event) {
      var _ref;
      this.offset = null;
      if (this.dragItem != null) {
        if (this.dragItem.jitter < 3) {
          switch (event.which) {
            case 1:
              if (this.dragItem.LeftClick) {
                this.dragItem.LeftClick(event);
              }
              break;
            case 2:
              if (this.dragItem.MiddleClick) {
                this.dragItem.MiddleClick(event);
              }
              break;
            case 3:
              if (this.dragItem.RightClick) {
                this.dragItem.RightClick(event);
              }
          }
        }
        if ((_ref = this.dragItem) != null ? _ref.MouseUp : void 0) {
          this.dragItem.MouseUp(event);
        }
        this.dragItem = null;
      } else {
        switch (event.which) {
          case 1:
            if (this.LeftClick) {
              this.LeftClick(event);
            }
            break;
          case 2:
            if (this.MiddleClick) {
              this.MiddleClick(event);
            }
            break;
          case 3:
            if (this.RightClick) {
              this.RightClick(event);
            }
        }
      }
      return cancelEvent(event);
    },
    OnMouseWheel: function(event) {
      this.Zoom(normalizeWheel(event));
      this.$('#zoomslider').slider('option', 'value', this.scale);
      return cancelEvent(event);
    },
    OnContextMenu: function(event) {
      return cancelEvent(event);
    }
  });

}).call(this);
