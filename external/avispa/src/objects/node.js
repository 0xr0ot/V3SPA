// Generated by CoffeeScript 1.6.3
(function() {
  Avispa.Node = Avispa.BaseObject.extend({
    el: function() {
      return $SVG('g').attr('class', 'node');
    },
    _init: function() {
      this.$circle = $SVG('circle').attr('r', this.position.get('radius')).css('fill', this.position.get('fill')).appendTo(this.$el);
      this.$label = $SVG('text').attr('dy', '0.5em').text(this.options.label).appendTo(this.$el);
    },
    render: function() {
      this.$circle.attr('cx', this.position.get('x')).attr('cy', this.position.get('y'));
      this.$label.attr('x', this.position.get('x')).attr('y', this.position.get('y'));
      return this;
    },
    OnMouseEnter: function(event) {
      if (context.dragItem == null) {
        this.$circle.attr('class', 'hover');
      }
      return cancelEvent(event);
    },
    OnMouseLeave: function(event) {
      if (context.dragItem == null) {
        this.$circle.removeAttr('class');
      }
      return cancelEvent(event);
    },
    Drag: function(event) {
      var x, y;
      x = (event.clientX / context.scale) - this.x1;
      y = (event.clientY / context.scale) - this.y1;
      if (this.offset) {
        this.offset.x = this.ox1 + x;
        this.offset.y = this.oy1 + y;
        if (this.offset.x < 0) {
          this.offset.x = 0;
          x = this.parent.position.get('x');
        } else if (this.offset.x > this.parent.position.get('w')) {
          this.offset.x = this.parent.position.get('w');
          x = this.parent.position.get('x') + this.parent.position.get('w');
        }
        if (this.offset.y < 0) {
          this.offset.y = 0;
          y = this.parent.position.get('y');
        } else if (this.offset.y > this.parent.position.get('h')) {
          this.offset.y = this.parent.position.get('h');
          y = this.parent.position.get('y') + this.parent.position.get('h');
        }
      }
      this.position.set({
        'x': x,
        'y': y
      });
      return cancelEvent(event);
    }
  });

}).call(this);
