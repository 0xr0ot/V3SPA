// Generated by CoffeeScript 1.6.3
(function() {
  Avispa.Group = Avispa.BaseObject.extend({
    el: function() {
      return $SVG('g').attr('class', 'group');
    },
    _init: function() {
      this.$rect = $SVG('rect').attr('width', this.position.get('w')).attr('height', this.position.get('h')).css('fill', this.position.get('fill')).appendTo(this.$el);
    },
    render: function() {
      this.$rect.attr('x', this.position.get('x')).attr('y', this.position.get('y'));
      return this;
    },
    OnMouseEnter: function(event) {
      if (context.dragItem == null) {
        this.$rect.attr('class', 'hover');
      }
      return cancelEvent(event);
    },
    OnMouseLeave: function(event) {
      if (context.dragItem == null) {
        this.$rect.removeAttr('class');
      }
      return cancelEvent(event);
    },
    Drag: function(event) {
      var boundsx, boundsy, x, y;
      x = (event.clientX / context.scale) - this.x1;
      y = (event.clientY / context.scale) - this.y1;
      if (this.offset) {
        this.offset.x = this.ox1 + x;
        this.offset.y = this.oy1 + y;
        boundsx = this.parent.position.get('w') - this.position.get('w') - 10;
        boundsy = this.parent.position.get('h') - this.position.get('h') - 10;
        if (this.offset.x < 10) {
          this.offset.x = 10;
          x = this.parent.position.get('x') + 10;
        } else if (this.offset.x > boundsx) {
          this.offset.x = boundsx;
          x = this.parent.position.get('x') + boundsx;
        }
        if (this.offset.y < 10) {
          this.offset.y = 10;
          y = this.parent.position.get('y') + 10;
        } else if (this.offset.y > boundsy) {
          this.offset.y = boundsy;
          y = this.parent.position.get('y') + boundsy;
        }
      }
      this.position.set({
        'x': x,
        'y': y
      });
      return cancelEvent(event);
    }
  });

}).call(this);
