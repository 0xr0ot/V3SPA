// Generated by CoffeeScript 1.6.3
(function() {
  Avispa.Link = Backbone.View.extend({
    el: function() {
      return $SVG('g').attr('class', 'link');
    },
    events: {
      'mousedown': 'OnMouseDown',
      'mouseenter': 'OnMouseEnter',
      'mouseleave': 'OnMouseLeave',
      'contextmenu': 'OnRightClick'
    },
    initialize: function(options) {
      this.options = options;
      this.path = $SVG('path').css('marker-end', 'url(#Arrow)').css('opacity', '0.5').appendTo(this.$el);
      _.bindAll(this, 'render', 'OnMouseDown', 'OnMouseEnter', 'OnMouseLeave', 'OnRightClick');
      this.left = this.options.left;
      this.right = this.options.right;
      this.arc = new Backbone.Model({
        arc: 10
      });
      this.arc.bind('change', this.render);
      this.left.position.bind('change', this.render);
      this.right.position.bind('change', this.render);
      this.render();
      return this;
    },
    update: function() {},
    render: function() {
      var ang, arc, lx, ly, mx, my, offset, rot, rx, ry, xc, yc;
      if (!this.arc) {
        return this;
      }
      arc = this.arc.get('arc');
      lx = this.left.position.get('x');
      ly = this.left.position.get('y');
      rx = this.right.position.get('x');
      ry = this.right.position.get('y');
      ang = Math.atan2(rx - lx, ry - ly);
      offset = Math.max(-1.5, Math.min(1.5, arc / 100));
      lx += 30 * Math.sin(ang + offset);
      ly += 30 * Math.cos(ang + offset);
      rx += -33 * Math.sin(ang - offset);
      ry += -33 * Math.cos(ang - offset);
      xc = ((lx + rx) >> 1) + arc * Math.cos(ang);
      yc = ((ly + ry) >> 1) - arc * Math.sin(ang);
      mx = xc - (arc >> 1) * Math.cos(ang);
      my = yc + (arc >> 1) * Math.sin(ang);
      rot = -(RAD * ang);
      if (rot > 0 && rot < 180) {
        rot -= 90;
      } else {
        rot += 90;
      }
      this.path.attr('d', "M " + lx + " " + ly + " Q " + xc + " " + yc + " " + rx + " " + ry);
      return this;
    },
    Drag: function(event) {
      var d, from_x, from_y, to_x, to_y, x, y, _ref;
      _ref = context.Point(event), x = _ref[0], y = _ref[1];
      from_x = this.left.position.get('x');
      from_y = this.left.position.get('y');
      to_x = this.right.position.get('x');
      to_y = this.right.position.get('y');
      d = (to_x - from_x) * (y - from_y) - (to_y - from_y) * (x - from_x);
      if (d) {
        d = Math.pow(Math.abs(d), 0.5) * (d > 0 ? -1 : 1);
      }
      if (!this.od && this.od !== 0) {
        this.od = d;
      }
      this.arc.set('arc', Math.max(10, this.oarc + d - this.od));
    },
    OnMouseDown: function(event) {
      this.jitter = 0;
      context.dragItem = this;
      this.oarc = this.arc.get('arc');
      this.od = null;
      return cancelEvent(event);
    },
    MouseUp: function(event) {
      if (this.jitter > 3) {
        this.path.css('stroke-width', '3px');
      }
    },
    OnMouseEnter: function() {
      if (context.dragItem == null) {
        this.path.css('stroke-width', '6px');
      }
    },
    OnMouseLeave: function() {
      if (context.dragItem == null) {
        this.path.css('stroke-width', '3px');
      }
    },
    LeftClick: function(event) {
      if (event.shiftKey) {
        this.arc.set('arc', 0);
      }
    },
    OnRightClick: function(event) {
      return cancelEvent(event);
    }
  });

}).call(this);
