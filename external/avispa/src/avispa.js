// Generated by CoffeeScript 1.6.3
(function() {
  var context;

  context = null;

  window.Avispa = Backbone.View.extend({
    events: {
      'mousedown.avispa': 'OnMouseDown',
      'mousemove.avispa': 'OnMouseMove',
      'mouseup.avispa': 'OnMouseUp',
      'mousewheel.avispa': 'OnMouseWheel',
      'DOMMouseScroll.avispa': 'OnMouseWheel',
      'contextmenu.avispa': 'OnContextMenu'
    },
    secondstage: function() {},
    initialize: function(options) {
      context = this;
      _.bindAll(this, 'render', 'OnMouseDown', 'OnMouseMove', 'OnMouseUp', 'OnMouseWheel', 'OnContextMenu');
      this.scale = 1.0;
      this.links = {};
      this.offset = null;
      this.dragItem = null;
      this.arrow = null;
      this.position = new Models.Position({
        x: 0,
        y: 0
      });
      this.zoom = {
        step: 0.125,
        min: 0.125,
        max: 2.5
      };
      this.$parent = this.$el.parent();
      this.$pan = this.$el.find('g.pan');
      this.$zoom = this.$el.find('g.zoom');
      this.$groups = this.$el.find('g.groups');
      this.$links = this.$el.find('g.links');
      this.$objects = this.$el.find('g.objects');
      this.$labels = this.$el.find('g.labels');
      this.$pan.x = window.innerWidth / 2;
      this.$pan.y = window.innerHeight / 2;
      this.Pan(0, 0);
      this.secondstage();
      return this;
    },
    Pan: function(dx, dy) {
      this.$pan.x += dx;
      this.$pan.y += dy;
      this.$pan.attr('transform', "translate(" + this.$pan.x + ", " + this.$pan.y + ")");
      this.$parent.css('background-position', "" + this.$pan.x + "px " + this.$pan.y + "px");
      return this;
    },
    Scale: function(scale) {
      this.scale = scale;
      this.$zoom.attr('transform', "scale(" + scale + ")");
      return this;
    },
    Zoom: function(delta) {
      var scale;
      if (delta === 0) {
        scale = 1.0;
      } else {
        scale = this.scale + delta * this.zoom.step;
      }
      if (scale <= this.zoom.min || scale >= this.zoom.max) {
        return this;
      }
      this.Scale(scale);
      return this;
    },
    Point: function(event) {
      var point;
      point = this.el.createSVGPoint();
      point.x = event.clientX;
      point.y = event.clientY;
      point = point.matrixTransform(this.el.getScreenCTM().inverse());
      point.x = parseInt((point.x - this.$pan.x) / this.scale);
      point.y = parseInt((point.y - this.$pan.y) / this.scale);
      return [point.x, point.y];
    },
    OnMouseDown: function(event) {
      if (this.arrow != null) {
        this.arrow.Remove();
        this.arrow = null;
        return cancelEvent(event);
      }
      switch (event.which) {
        case 1:
          this.LeftDown(event);
          break;
        case 2:
          this.MiddleDown(event);
          break;
        case 3:
          if (this.RightDown) {
            this.RightDown(event);
          }
      }
      return cancelEvent(event);
    },
    LeftDown: function(event) {
      this.offset = [event.clientX, event.clientY];
    },
    MiddleDown: function(event) {
      this.Pan(-this.$pan.x + window.innerWidth / 2, -this.$pan.y + window.innerHeight / 2);
      this.Zoom(0);
      this.$('#zoomslider').slider('option', 'value', 1);
    },
    OnMouseMove: function(event) {
      if (this.offset) {
        this.Pan(event.clientX - this.offset[0], event.clientY - this.offset[1]);
        this.offset = [event.clientX, event.clientY];
      } else if (this.arrow) {
        this.arrow.Drag(event);
      } else if (this.dragItem) {
        this.dragItem.jitter++;
        if (this.dragItem.Drag) {
          this.dragItem.Drag(event);
        }
      }
      return cancelEvent(event);
    },
    OnMouseUp: function(event) {
      var _ref;
      this.offset = null;
      if (this.dragItem != null) {
        if (this.dragItem.jitter < 3) {
          switch (event.which) {
            case 1:
              if (this.dragItem.LeftClick) {
                this.dragItem.LeftClick(event);
              }
              break;
            case 2:
              if (this.dragItem.MiddleClick) {
                this.dragItem.MiddleClick(event);
              }
              break;
            case 3:
              if (this.dragItem.RightClick) {
                this.dragItem.RightClick(event);
              }
          }
        }
        if ((_ref = this.dragItem) != null ? _ref.MouseUp : void 0) {
          this.dragItem.MouseUp(event);
        }
        this.dragItem = null;
      } else {
        switch (event.which) {
          case 1:
            if (this.LeftClick) {
              this.LeftClick(event);
            }
            break;
          case 2:
            if (this.MiddleClick) {
              this.MiddleClick(event);
            }
            break;
          case 3:
            if (this.RightClick) {
              this.RightClick(event);
            }
        }
      }
      return cancelEvent(event);
    },
    OnMouseWheel: function(event) {
      this.Zoom(normalizeWheel(event));
      this.$('#zoomslider').slider('option', 'value', this.scale);
      return cancelEvent(event);
    },
    OnContextMenu: function(event) {
      console.log('yeah');
      return cancelEvent(event);
    }
  });

}).call(this);
